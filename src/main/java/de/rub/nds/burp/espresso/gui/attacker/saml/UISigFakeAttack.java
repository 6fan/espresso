/**
 * EsPReSSO - Extension for Processing and Recognition of Single Sign-On Protocols.
 * Copyright (C) 2015 Tim Guenther and Christian Mainka
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
package de.rub.nds.burp.espresso.gui.attacker.saml;

import de.rub.nds.burp.espresso.gui.attacker.IAttack;
import de.rub.nds.burp.utilities.Logging;
import de.rub.nds.burp.utilities.XMLHelper;
import de.rub.nds.burp.utilities.attacks.signatureFaking.SignatureFakingOracle;
import de.rub.nds.burp.utilities.attacks.signatureFaking.exceptions.CertificateHandlerException;
import de.rub.nds.burp.utilities.attacks.signatureFaking.exceptions.SignatureFakingException;
import de.rub.nds.burp.utilities.listeners.AbstractCodeEvent;
import de.rub.nds.burp.utilities.listeners.CodeListenerController;
import de.rub.nds.burp.utilities.listeners.events.SamlCodeEvent;
import javax.swing.DefaultListModel;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import wsattacker.library.xmlutilities.dom.DomUtilities;
import wsattacker.library.xmlutilities.namespace.NamespaceConstants;

/**
 * The Signature Exlusion Attack
 * @author Nurullah Erinola
 * @version 1.0
 */
public class UISigFakeAttack extends javax.swing.JPanel implements IAttack {

    private String saml = null;
    private Document doc = null;
    private CodeListenerController listeners = null;
    private DefaultListModel signaturePaths;

    /**
     * Creates new form UISigExcAttack
     */
    public UISigFakeAttack() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPaneSignatures = new javax.swing.JScrollPane();
        jListSignatures = new javax.swing.JList<>();
        jButtonFakeSelected = new javax.swing.JButton();
        jButtonFakeAll = new javax.swing.JButton();
        jCheckBoxReplaceAll = new javax.swing.JCheckBox();

        jLabel1.setText("Select to be faked signature:");

        jScrollPaneSignatures.setViewportView(jListSignatures);

        jButtonFakeSelected.setText("Fake");
        jButtonFakeSelected.setToolTipText("Fake selected signatures.");
        jButtonFakeSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFakeSelectedActionPerformed(evt);
            }
        });

        jButtonFakeAll.setText("Fake all");
        jButtonFakeAll.setToolTipText("Fake all signatures.");
        jButtonFakeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFakeAllActionPerformed(evt);
            }
        });

        jCheckBoxReplaceAll.setText("Replace all certificates");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneSignatures, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonFakeSelected)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonFakeAll))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxReplaceAll)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCheckBoxReplaceAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneSignatures, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonFakeAll)
                    .addComponent(jButtonFakeSelected))
                .addContainerGap(104, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFakeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFakeAllActionPerformed
        if(doc != null) {
            Logging.getInstance().log(getClass(), "Start signature faking.", Logging.INFO);
            try {
                SignatureFakingOracle oracle = new SignatureFakingOracle(doc, jCheckBoxReplaceAll.isSelected());
                oracle.fakeSignatures();
                doc = oracle.getDocument();
            } catch (SignatureFakingException ex) {
                Logging.getInstance().log(UISigFakeAttack.class, ex);
            }
            saml = XMLHelper.docToString(doc);
            notifyAllTabs(new SamlCodeEvent(this, saml.getBytes()));
            Logging.getInstance().log(getClass(), "Signature faking successfull.", Logging.INFO);
        }
    }//GEN-LAST:event_jButtonFakeAllActionPerformed

    private void jButtonFakeSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFakeSelectedActionPerformed
        if(doc != null && !jListSignatures.isSelectionEmpty()) {
            Logging.getInstance().log(getClass(), "Start signature exclusion.", Logging.INFO);
            try {
                SignatureFakingOracle oracle = new SignatureFakingOracle(doc, jCheckBoxReplaceAll.isSelected());
                for(int i : jListSignatures.getSelectedIndices()) {
                    oracle.fakeSignature(i);
                }
                doc = oracle.getDocument();
            } catch (CertificateHandlerException | SignatureFakingException ex) {
                Logging.getInstance().log(UISigFakeAttack.class, ex);
            }
            saml = XMLHelper.docToString(doc);
            notifyAllTabs(new SamlCodeEvent(this, saml.getBytes()));
            Logging.getInstance().log(getClass(), "Signature exclusion successfull.", Logging.INFO);
        }
    }//GEN-LAST:event_jButtonFakeSelectedActionPerformed

    /**
     * Update JList with signature paths
     */
    private void update() {
        signaturePaths = new DefaultListModel();
        doc = XMLHelper.stringToDom(saml);
        // Search signatures in SAML message
        NodeList list = doc.getElementsByTagNameNS(NamespaceConstants.URI_NS_DS, "Signature");
        for(int i = 0; i < list.getLength(); i++) {
            signaturePaths.addElement(DomUtilities.getFastXPath(list.item(i)));
        }
        jListSignatures.setModel(signaturePaths);
    }

    /**
     * Is called every time new Code is available.
     * @param evt {@link de.rub.nds.burp.utilities.listeners.AbstractCodeEvent} The new source code.
     */
    @Override
    public void setCode(AbstractCodeEvent evt) {
        this.saml = new String(evt.getCode());
        update();
    }

    /**
     * Notify all registered listeners with the new code.
     * @param evt The new source code.
     */
    @Override
    public void notifyAllTabs(AbstractCodeEvent evt) {
        if(listeners != null){
            listeners.notifyAll(evt);
        }
    }

    /**
     * Set the listener for the editor.
     * @param listeners {@link de.rub.nds.burp.utilities.listeners.CodeListenerController}
     */
    @Override
    public void setListener(CodeListenerController listeners) {
        this.listeners = listeners;
        this.listeners.addCodeListener(this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFakeAll;
    private javax.swing.JButton jButtonFakeSelected;
    private javax.swing.JCheckBox jCheckBoxReplaceAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListSignatures;
    private javax.swing.JScrollPane jScrollPaneSignatures;
    // End of variables declaration//GEN-END:variables
}
